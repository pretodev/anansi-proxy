(* ============================================ property_key = identifier ;
property_value = any_char_except_EOL , { any_char_except_EOL } ;
property = property_key , ":" , [ SP ] , property_value , EOL ;(* Basic Tokens - Characresponse_line = "--" , [ SP ] , staresponse_line = "--" , [ SP ] , status_code , ":" , [ SP ] , [ description ] , EOL ;

response_body_line = any_char_exceptus_code , ":" , [ SP ] , [ description ] , EOL ;_EOL , { any_char_except_EOL } , EOL ;
response_body = response_body_line , { response_body_line } ; and Whitespace   *)
(* ============================================ *)

letter = "A".."Z" | "a".."z" ;
digit = "0".."9" ;
SP = " " | "\t" ;
EOL = "\n" | "\r\n" ;

(* Special character classes *)
any_char_except_EOL = ? any character except end of line ? ;
any_char_except_EOL_or_space = ? any character except end of line or space ? ;


(* ============================================ *)
(* Primitive Elements - Simple Identifiers     *)
(* ============================================ *)

identifier = letter , { letter | digit | "_" | "-" | "." } ;
status_code = digit , digit , digit ;
description = any_char_except_EOL , { any_char_except_EOL } ;
blank_line = SP* , EOL ;
blank_lines = blank_line , { blank_line } ;


(* ============================================ *)
(* HTTP Protocol Elements                      *)
(* ============================================ *)

http_method = "GET" | "POST" | "PUT" | "DELETE" | "PATCH" | "HEAD" | "OPTIONS" | "TRACE" | "CONNECT" ;

(* Path segment: can be a literal identifier or a placeholder
   Examples: "users" or "{userId}"
*)
path_segment = identifier | ( "{" , identifier , "}" ) ;

path_start = "/" , path_segment , { "/" , path_segment } ;

(* Indented continuation of path, query params, or additional query params *)
indent = SP , { SP } ;

path_continuation = indent , ( ( "/" , path_segment ) 
                             | ( "?" , query_parameter ) 
                             | ( "&" , query_parameter ) ) , EOL ;

query_parameter = identifier , "=" , query_parameter_value ;
query_parameter_value = any_char_except_EOL_or_space , { any_char_except_EOL_or_space } ;


(* ============================================ *)
(* Properties - Key-Value Pairs (HTTP Headers) *)
(* ============================================ *)

property_key = identifier ;
property_value = any_char_except_EOL , { any_char_except_EOL } ;
property = property_key , ":" , [ SP ] , property_value , EOL ;


(* ============================================ *)
(* Request Components                          *)
(* ============================================ *)

(* Method line: defines HTTP method and path
   Example: POST /api/users
*)
method_line = [ http_method , SP ] , path_start , EOL , { path_continuation } ;

(* Body can be JSON schema, XML schema, plain text, etc. *)
body_line = any_char_except_EOL , { any_char_except_EOL } , EOL ;
body = body_line , { body_line } ;

(* Request section: complete HTTP request structure *)
request_section = method_line ,
                  { property } ,
                  [ blank_line , body ] ;


(* ============================================ *)
(* Response Components                         *)
(* ============================================ *)

response_line = "--" , [ SP ] , status_code , ":" , [ SP ] , [ description ] , EOL ;

response_body_line = any_char_except_EOL , { any_char_except_EOL } , EOL ;
response_body = response_body_line , { response_body_line } ;

(* Response section: complete HTTP response structure *)
response_section = response_line ,
                   { property } ,
                   [ blank_line , response_body ] ;


(* ============================================ *)
(* Root Rule - Complete APIMock File           *)
(* ============================================ *)

apimock = [ request_section , blank_lines ] , 
          response_section , 
          { blank_lines , response_section } ;